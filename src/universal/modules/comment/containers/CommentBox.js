import React from 'react';
import CommentList from '../components/CommentList';
import CommentForm from '../components/CommentForm'
import autobind from 'autobind-decorator';
import $ from 'jquery';

export default class CommentBox extends React.Component{
  constructor(props) {
    super(props);
    this.state={data:[], form:{author: '', text: ''}};
  }
  componentDidMount() {
    this.loadCommentsFromServer();
    // setInterval(this.loadCommentsFromServer, this.props.pollInterval);
  }
  @autobind
  loadCommentsFromServer() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  }
  @autobind
  handleCommentSubmit(comment) {
    var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    var newComments = comments.concat([comment]);
    this.setState({data: newComments});
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: comments});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  }
  @autobind
  handleAuthorChange(val) {
    this.setState({form: {author: val, text: this.state.form.text}});
  }
  @autobind
  handleTextChange(val) {
    this.setState({form: {text: val, author: this.state.form.author}});
  }
  render() {
    const {handleAuthorChange, handleTextChange, handleCommentSubmit} = this;
    const formActions = {handleAuthorChange, handleTextChange, handleCommentSubmit};
    return (
      <div className="commentBox">
        <h1>Comments</h1>
        <CommentList data={this.state.data} />
        <CommentForm {...this.state.form} actions={formActions}/>
      </div>
    );
  }
};
